"""
Даны два массива чисел. Требуется вывести те элементы первого массива (в том порядке, 
в каком они идут в первом массиве), которых нет во втором массиве. Пользователь вводит
число N - количество элементов в первом массиве, затем N чисел - элементы массива. 
Затем число M - количество элементов во втором массиве. Затем элементы второго массива
Ввод: 
7 
3 1 3 4 2 4 12
6
4 15 43 1 15 1
Вывод:
3 3 2 12 
"""
# n = int(input('Enter length array 1: '))
# mas1 = [int(input(f'  element [{i}] = ')) for i in range(n)]
# n = int(input('Enter length array 2: '))
# mas2 = [int(input(f'  element [{i}] = ')) for i in range(n)]

# for i in mas1:
#     if not i in mas2:
#         print(i, end = ' ')



""" 
Дан массив, состоящий из целых чисел. Напишите
программу, которая в данном массиве определит
количество элементов, у которых два соседних и, при
этом, оба соседних элемента меньше данного. Сначала
вводится число N — количество элементов в массиве
Далее записаны N чисел — элементы массива. Массив
состоит из целых чисел.

Ввод:                       Ввод:
5                           5
1 2 3 4 5                   1 5 1 5 1
Вывод:                      Вывод:
0                           2
"""
# n = int(input('Enter length array: '))
# mas = [int(input(f'  element [{i}] = ')) for i in range(n)]
# cnt = 0

# for i in range(1,len(mas)-1):
#     if mas[i-1] < mas[i] and mas[i+1] < mas[i]:
#         cnt += 1
# print(cnt)



""" 
Дан список чисел. Посчитайте, сколько в нем пар
элементов, равных друг другу. Считается, что любые
два элемента, равные друг другу образуют одну пару,
которую необходимо посчитать. Вводится список
чисел. Все числа списка находятся на разных
строках.
Ввод:               Вывод:
1 2 3 2 3           2
"""
# n = int(input('Enter length array: '))
# mas = [int(input(f'  element [{i}] = ')) for i in range(n)]
# cnt = 0
# sum = [str(mas[i])+str(mas[i+1]) for i in range(len(mas)-1)]

# print(mas)
# print(sum)
# mn = set(sum)
# print(mn)
# print(len(mas) - len(mn))


# n = int(input('Enter length array: '))
# mas = [int(input(f'  element [{i}] = ')) for i in range(n)]
# cnt = 0
# sum = set([str(mas[i])+str(mas[i+1]) for i in range(len(mas)-1)])

# print(mas)
# print(sum)
# print(len(mas) - len(sum))



""" 
Два различных натуральных числа n и m называются дружественными, если сумма делителей числа n
(включая 1, но исключая само n) равна числу m и наоборот. 
Например, 220 и 284 – дружественные числа. 
По данному числу k выведите все пары дружественных чисел, каждое из которых не превосходит k. 
Программа получает на вход одно натуральное число k, не превосходящее 105. 
Программа должна вывести все пары дружественных чисел, каждое из которых не превосходит k. 
Пары необходимо выводить по одной в строке, разделяя пробелами. Каждая пара должна быть
выведена только один раз (перестановка чисел новую пару не дает).
Ввод:           Вывод:
300             220 284
"""

# чтобы найти все делители не надо проходить от 1 до N / 2, достаточно 
# пройти от 2 до sqrt(N) найдя 2 делителя - основной и второй, который 
# равен частному от числа и найденного основного делителя


# def getSum(value):
#     res = 1 + (0 if int(value**0.5)**2 != value else int(value**0.5))
#     print(f'- {value}: res = {res}   val = {int(value**0.5)**2}', end = '   |  ')
#     # if int(value**0.5)**2 != value:
#     #     val = 1 + 0
#     # else:
#     #     val = 1 + int(value**0.5)     # особый случай - число является степенью чего-то

#     for i in range(2, int(value ** 0.5)):
#         if value % i == 0:
#             res += i + value // i
#     print(f' sum = {res}')
#     return res

# for i in range(10, k+1):
#     sum1 = getSum(i)
#     sum2 = getSum(sum1)
#     if sum2 == i and sum1 != sum2:
#         print(i, sum1)


# # # стандартное решение перебором всех делителей
# num_cycles = 0

# def sum_factors(n):
#     global num_cycles
#     s = 0
#     for k in range(1, n // 2 + 1):
#         num_cycles += 1
#         if n % k == 0:
#             s += k
#     return s



""" 
Подсчитывает сумму делителей числа (без самого числа).
Подсчет ведется с учетом того, что делители числа можно разделить на 
два типа: основной и вторичный.
Основной - это делители меньше корня квадратного числа.
Вторичный - это делители больше корня квадратного.
Основные и вторичные делители взаимосвязаны и образуют пары. Исключением
является сам корень квадратный из числа, если он целочисленный. Он всегда
без пары и это нужно учесть в алгоритме. Так же обособленно у нас
стоит единица, она присутствует в любом числе и без пары.
Вторичный делитель всегда является результатом деления исходного
числа на основной делитель. Поэтому вторичные искать не нужно, их
легко вычислить.
Например:
84 = [1, 2, 3, 4, 6, 7, 12, 14, 21, 28, 42]
Основные:                   2,  3,  4,  6,  7
И соответствующие им пары: 42, 28, 21, 14, 12
Как нетрудно заметить: 42 = 84/12, 28 = 84/3, 21 = 84/4 и тд.
"""

# def sum_divsors(value):
#     res = 1
#     n = int(value**0.5)
#     if n*n == value:
#         res -= n        # у нас особый случай - целочисленный корень числа
#     for i in range(2, n+1):
#         if value % i == 0:
#             res += i + (value // i)
#     return res



# iters = int(input('Enter num: '))
